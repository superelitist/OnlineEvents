[OPTIONS]
; Set to true to omit the notification at game start.
load_without_notification=false
; Set to false to turn beeps off.
play_notification_beeps=true
; Set to true to use plain circles instead of descriptive blips.
use_default_blip=false
; Once a mission starts, you will have this many seconds to finish it. If this time elapses and you are more than mission_minimum_range_for_timeout meters away, the event will end. I hard-coded a minimum of 180 seconds on this.
mission_timeout=360
; When the game loads, and after an event ends, this many seconds must elapse before the script will start a new one. Since the script dynamically gathers spawn points, setting this too low will cause it to fail to create events until it has found a spawn point that satisfies spawn_point_minimum_range and spawn_point_maximum_range. I hard-coded a minimum of 30 seconds on this.
mission_cooldown=60
; Generally speaking, events will not begin closer than this number. Again, since (most) spawn points are dynamically gathered, if you start the game and just stand around for a while (mission_cooldown), events won't be able to start until you move about this far from your position at load (and then they're likely to start right around where you loaded the game...).
spawn_point_minimum_range=1111
; Same as above, but maximum. AFAIK, you can set this as high as you like, but one of the primary reasons I decided to rewrite the original is because the script always chose spawn points VERY far away (and there were only 10 hard-coded points for each event, so it got kinda repetitive always driving 5 miles to the same spot).
spawn_point_maximum_range=3333
; As noted above, this is how close you must be to avoid the timeout. You can probably set this to 0 if you want the event to always be over based on time alone (or 10000 if you never want it to time out). I haven't tested this though...
mission_minimum_range_for_timeout=333
; The reward numbers I chose are incredibly arbitrary. I may modify them depending on feedback. For now, you can multiply all rewards by the same amount here. Here's a perfect example of a number you shouldn't set very high. Setting this to 10000000000000.0 might give you 10000000000000000 dollars for each mission - or it may crash the game. I have no idea. Just don't do it.
mission_reward_modifier=1.0
; the following two options are bitwise integers. Feel free to look it up. It's just a rather simple method of supplying flags as a single parameter. Check it out:
;	Compact = 1,
;	Sedan = 2,
;	SUV = 4,
;	Coupe = 8,
;	Muscle = 16,
;	SportsClassic = 32,
;	Sports = 64,
;	Super = 128,
;	Motorcycle = 256,
;	OffRoad = 512,
;	Industrial = 1024,
;	Utility = 2048,
;	Van = 4096,
;	Cycle = 8192,
;	Boat = 16384,
;	Helicopter = 32768,
;	Plane = 65536,
;	Service = 131072,
;	Emergency = 262144,
;	Military = 524288,
;	Commercial = 1048576,
;	Train = 2097152
;
;	Each of these values is twice the last. This has the simple property that no combination of these numbers will add up to any other one of these numbers. Try it.
;	So all you need to do is look at what classes you want, and add up the numbers next to them. Then use that number below.
;	By default I want the destroy mission to pick SUVs, Muscles, Offroads, and Motorcycles. So I add up 4, 16, 512, and 256. Voila.
destroyable_vehicle_flags=788
;	I'll let you figure out how to decipher the classes I default to here (hint: start by subtracting the largest number you can)
stealable_vehicle_flags=1023
;	how many guards to spawn to protect a crate. Special crates get 50% more. Guards respawn when killed, so only a few still present a considerable challenge. Hardcoded max is 12, because I don't want people to set this to 1000 and then complain when the game crashes.
number_of_guards_to_spawn=4
;
[DEBUG]
; You can usually ignore all of these...
; You can't turn logging entirely off, but you can change it some. 
;	LogError			= 1, Only things that should never have happened.
;	LogNormal			= 2, Some informational things, usually will only log once. Should get a couple lines a minute on this.
;	LogVerbose			= 4, Some informational things that repeat a lot.
;	LogDebug			= 8, Mostly to follow program flow, but spammy.
logging_level=8
; Debug mode does some fun things like report the performance of the script, and draw markers for spawn points (if distance_to_draw_spawn_points is greater than 0)
debug_enable=false
; Set this to about 10 or 15 seconds, and it will wait for the persistence script to load the vehicles, and then reserve those spawn points so they can't be used later. If this is set to 0 however, it won't wait or reserve spawns at all. It (kind of) works.
seconds_to_wait_for_vehicle_persistence_scripts=0
; The script won't consider vehicles for spawn points inside this range, primarily to avoid adding a player's car if they get out in the middle of the freeway. It's an imperfect method. Find me a better one.
vehicle_search_range_minimum=30
; In practice, I've gathered over almost a thousand spawns in a few minutes of driving through downtown LS, and several thousand after ~30 minutes of gameplay. The script uses a First-In-First-Out method to replace entries after this limit is reached. I added some controls to prevent the script from using too much CPU time when adding spawn points, so technically you can increase this as high as you'd like, but over about 10k it starts to lag the script by ~500 milliseconds. You've been warned.
maximum_number_of_spawn_points=10000
; This probably never needs to be touched. It works the same way as above, but the game only has a few hundred models anyway. Also, this isn't holding the models themselves, only hashes, so it's not really a memory issue.
maximum_number_of_vehicle_models=1000
; I added this to help visualize where the spawns are being located. 100 seems reasonable - you can try a higher number, but it might glitch out.
distance_to_draw_spawn_points=0
; if true, writes every point to a point cloud file when found. Since the points are not persisted between sessions, there may be duplicates.
dump_parked_cars_to_xyz_file=false